{"version":3,"file":"component---src-pages-projects-tsx-3074f6998f8c122d383b.js","mappings":"mQAiCA,MAAMA,EAAU,CAAC,QAAS,MAAO,QAAS,QAAS,KAAM,MAE1C,SAASC,EAAQC,GAAoC,IAAnC,KAAEC,EAAI,SAAEC,GAAyBF,EAChE,MAAMG,GAASC,EAAAA,EAAAA,UAAuB,KACpC,MAAMC,EAAY,IAAIC,gBAAgBJ,aAAQ,EAARA,EAAUK,QAChD,OAAOF,EAAUG,IAAI,UAAYH,EAAUI,IAAI,UAAY,IAAI,GAC9D,CAACP,IAEEQ,GAAqBN,EAAAA,EAAAA,UAA4B,IAChDD,EACEF,EAAKU,KAAKC,WAAWC,KAAIC,IAC9B,MAAMC,EAAWD,EAASC,SAASF,KAAIG,IAAW,IAC7CA,EACHC,QAASD,EAAQE,KAAKC,SAAShB,OAEjC,MAAO,CACLiB,MAAON,EAASM,MAChBL,WACAM,MAAON,EAASO,OAAMN,GAAWA,EAAQC,SAC1C,IAViBhB,EAAKU,KAAKC,YAY7B,CAACX,EAAME,IAEV,OACEoB,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACHC,GAAG,WACHvB,SAAUA,EACVwB,SAAU,CACRC,IAAKC,EAAAA,GACLR,MAAO,0BACPS,UAEFC,EAAAA,EAAAA,MAAA,WAASC,UAAU,6BAA4BF,SAAA,EAC7CC,EAAAA,EAAAA,MAAA,WAASC,UAAU,wBAAuBF,SAAA,EACxCN,EAAAA,EAAAA,KAAA,MAAIQ,UAAU,YAAWF,SAAC,cAC1BN,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,yBAAwBF,SACpC/B,EAAQe,KAAImB,IACXT,EAAAA,EAAAA,KAAA,UACEU,QAASA,KACH9B,IAAW6B,GACbE,EAAAA,EAAAA,UAAS,GAAGhC,EAASiC,WAAWjC,EAASkC,OAAQ,CAC/CC,SAAS,KAGXH,EAAAA,EAAAA,UACE,GAAGhC,EAASiC,WAAWjC,EAASkC,eAAeJ,IAC/C,CAAEK,SAAS,GAEf,EACAR,UAGFN,EAAAA,EAAAA,KAACe,EAAAA,GAAK,CACJP,UAAWQ,IAAW,CAAE,kBAAmBpC,IAAW6B,IACtDQ,MAAI,EAAAX,SAEHG,KANEA,UAYZtB,EAAmBG,KAAIC,IACtBgB,EAAAA,EAAAA,MAAA,WACEC,UAAWQ,IAAW,0BAA2B,CAC/C,iCAAkCzB,EAASO,QAC1CQ,SAAA,EAGHN,EAAAA,EAAAA,KAAA,MAAIQ,UAAU,KAAIF,SAAEf,EAASM,SAC7BG,EAAAA,EAAAA,KAAA,MAAAM,SACGf,EAASC,SAASF,KAAIG,IACrBO,EAAAA,EAAAA,KAAA,MACEQ,UAAWQ,IAAW,sBAAuB,CAC3C,8BAA+BvB,EAAQC,SACtCY,UAGHC,EAAAA,EAAAA,MAACW,EAAAA,GAAI,CACHC,GAAI1B,EAAQ2B,KAAOC,EAAAA,KAAa,IAChCC,SAAUC,QAAQ9B,EAAQ+B,eAAiB/B,EAAQ2B,MAEnDK,OAAO,SACPC,GAAIjC,EAAQ2B,MAAQ3B,EAAQ+B,aAC5BG,UAAQ,EAAArB,SAAA,EAERC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBF,SAAA,EAClCN,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,uBAAsBF,SACnCb,EAAQI,SAEXG,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,6BAA4BF,SACzCb,EAAQmC,kBAGb5B,EAAAA,EAAAA,KAAA,MAAIQ,UAAU,yBACdR,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,sBAAqBF,SAAEb,EAAQoC,SAdzCpC,EAAQI,QALVJ,EAAQI,aATdN,EAASM,aAsC1B,C","sources":["webpack://@adamgraham/portfolio/./src/pages/projects.tsx"],"sourcesContent":["import { Badge, Link } from '@zigurous/react-components';\r\nimport classNames from 'classnames';\r\nimport { graphql, Link as GatsbyLink, navigate } from 'gatsby';\r\nimport React, { useMemo } from 'react';\r\nimport { Page } from '../components';\r\nimport { baseUri } from '../links';\r\nimport '../styles/projects-list.css';\r\n\r\ninterface ProjectsCategory {\r\n  title: string;\r\n  projects: ProjectsProject[];\r\n  empty?: boolean;\r\n}\r\n\r\ninterface ProjectsProject {\r\n  title: string;\r\n  description: string;\r\n  date: string;\r\n  link: string;\r\n  externalLink: string;\r\n  tags: string[];\r\n  hidden?: boolean;\r\n}\r\n\r\ninterface ProjectsProps {\r\n  data: {\r\n    json: {\r\n      categories: ProjectsCategory[];\r\n    };\r\n  };\r\n  location: Location;\r\n}\r\n\r\nconst filters = ['React', 'iOS', 'Unity', 'VR/AR', '3D', '2D'];\r\n\r\nexport default function Projects({ data, location }: ProjectsProps) {\r\n  const filter = useMemo<string | null>(() => {\r\n    const urlParams = new URLSearchParams(location?.search);\r\n    return urlParams.has('filter') ? urlParams.get('filter') : null;\r\n  }, [location]);\r\n\r\n  const filteredCategories = useMemo<ProjectsCategory[]>(() => {\r\n    if (!filter) return data.json.categories;\r\n    return data.json.categories.map(category => {\r\n      const projects = category.projects.map(project => ({\r\n        ...project,\r\n        hidden: !project.tags.includes(filter),\r\n      }));\r\n      return {\r\n        title: category.title,\r\n        projects,\r\n        empty: projects.every(project => project.hidden),\r\n      };\r\n    });\r\n  }, [data, filter]);\r\n\r\n  return (\r\n    <Page\r\n      id=\"projects\"\r\n      location={location}\r\n      metadata={{\r\n        url: baseUri,\r\n        title: 'Adam Graham â€¢ Projects',\r\n      }}\r\n    >\r\n      <article className=\"projects-list container-lg\">\r\n        <section className=\"projects-list__header\">\r\n          <h1 className=\"display-4\">Projects</h1>\r\n          <div className=\"projects-list__filters\">\r\n            {filters.map(tag => (\r\n              <button\r\n                onClick={() => {\r\n                  if (filter === tag) {\r\n                    navigate(`${location.pathname}${location.hash}`, {\r\n                      replace: true,\r\n                    });\r\n                  } else {\r\n                    navigate(\r\n                      `${location.pathname}${location.hash}?filter=${tag}`,\r\n                      { replace: true },\r\n                    );\r\n                  }\r\n                }}\r\n                key={tag}\r\n              >\r\n                <Badge\r\n                  className={classNames({ 'badge--selected': filter === tag })}\r\n                  pill\r\n                >\r\n                  {tag}\r\n                </Badge>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </section>\r\n        {filteredCategories.map(category => (\r\n          <section\r\n            className={classNames('projects-list__category', {\r\n              'projects-list__category--empty': category.empty,\r\n            })}\r\n            key={category.title}\r\n          >\r\n            <h2 className=\"h6\">{category.title}</h2>\r\n            <ul>\r\n              {category.projects.map(project => (\r\n                <li\r\n                  className={classNames('projects-list__item', {\r\n                    'projects-list__item--hidden': project.hidden,\r\n                  })}\r\n                  key={project.title}\r\n                >\r\n                  <Link\r\n                    as={project.link ? GatsbyLink : 'a'}\r\n                    external={Boolean(project.externalLink && !project.link)}\r\n                    key={project.title}\r\n                    target=\"_blank\"\r\n                    to={project.link || project.externalLink}\r\n                    unstyled\r\n                  >\r\n                    <div className=\"projects-list__text\">\r\n                      <span className=\"projects-list__title\">\r\n                        {project.title}\r\n                      </span>\r\n                      <span className=\"projects-list__description\">\r\n                        {project.description}\r\n                      </span>\r\n                    </div>\r\n                    <hr className=\"projects-list__line\" />\r\n                    <div className=\"projects-list__date\">{project.date}</div>\r\n                  </Link>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        ))}\r\n      </article>\r\n    </Page>\r\n  );\r\n}\r\n\r\nexport const query = graphql`\r\n  query Projects {\r\n    json: allProjectsJson {\r\n      categories: nodes {\r\n        title\r\n        projects {\r\n          title\r\n          description\r\n          date\r\n          link\r\n          externalLink\r\n          tags\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["filters","Projects","_ref","data","location","filter","useMemo","urlParams","URLSearchParams","search","has","get","filteredCategories","json","categories","map","category","projects","project","hidden","tags","includes","title","empty","every","_jsx","Page","id","metadata","url","baseUri","children","_jsxs","className","tag","onClick","navigate","pathname","hash","replace","Badge","classNames","pill","Link","as","link","GatsbyLink","external","Boolean","externalLink","target","to","unstyled","description","date"],"sourceRoot":""}