{"version":3,"file":"component---src-pages-resume-tsx-c9a746efde5949cb35d8.js","mappings":"sPAae,SAASA,EAAMC,GAAkC,IAAjC,KAAEC,EAAI,SAAEC,GAAuBF,EAC5D,MAAMG,EAASF,EAAKE,OAAOC,MAAM,GACjC,OACEC,EAAAA,cAACC,EAAAA,GAAI,CAACC,GAAG,SAASC,YAAU,EAACN,SAAUA,GACrCG,EAAAA,cAAA,OAAKI,UAAU,aACbJ,EAAAA,cAAA,UAAQI,UAAU,aAChBJ,EAAAA,cAACK,EAAAA,GAAG,CAACD,UAAU,QAAQE,KAAK,KAAKC,GAAG,KAClCP,EAAAA,cAACQ,EAAAA,GAAI,CAACC,GAAG,KAAKP,GAAG,OAAOQ,aAAa,KAAKC,KAAK,WAC5Cb,EAAOc,MAEVZ,EAAAA,cAACQ,EAAAA,GAAI,CACHN,GAAG,QACHW,MAAM,SACNH,aAAa,KACbI,MAAO,CAAEC,SAAU,UACnBJ,KAAK,WACLK,OAAO,OAENlB,EAAOmB,OAEVjB,EAAAA,cAACQ,EAAAA,GAAI,CACHN,GAAG,UACHE,UAAU,eACVS,MAAM,SACNF,KAAK,QAEJb,EAAOoB,UAGZlB,EAAAA,cAACK,EAAAA,GAAG,CACFH,GAAG,UACHE,UAAU,kCACVU,MAAO,CAAEK,IAAK,qBACdb,KAAK,KACLC,GAAG,KAEFT,EAAOsB,QAAQC,IAAID,GAClBpB,EAAAA,cAACQ,EAAAA,GAAI,CACHN,GAAIkB,EAAQlB,GACZoB,IAAKF,EAAQlB,GACbE,UAAU,2BACVS,MAAM,SACNF,KAAK,UACLK,OAAO,OAEPhB,EAAAA,cAACuB,EAAAA,GAAI,CACHnB,UAAU,QACVoB,KAAMJ,EAAQI,KACdb,KACiB,WAAfS,EAAQlB,IAAkC,aAAfkB,EAAQlB,GAC/B,SACA,aAGPkB,EAAQK,KACPzB,EAAAA,cAAC0B,EAAAA,GAAI,CAACC,KAAMP,EAAQK,KAAMG,UAAQ,EAACC,UAAQ,GACxCT,EAAQU,MAGXV,EAAQU,SAMlB9B,EAAAA,cAAC+B,EAAAA,GAAG,KACF/B,EAAAA,cAACK,EAAAA,GAAG,CAACC,KAAK,KAAKC,GAAG,KAChBP,EAAAA,cAACgC,EAAgB,CAACC,WAAYnC,EAAOmC,cAEvCjC,EAAAA,cAACK,EAAAA,GAAG,CAACC,KAAK,KAAKC,GAAG,KAChBP,EAAAA,cAACkC,EAAe,CAACC,UAAWrC,EAAOqC,YACnCnC,EAAAA,cAACoC,EAAY,CAACC,OAAQvC,EAAOuC,WAGjCrC,EAAAA,cAACsC,EAAc,CAACC,SAAUzC,EAAOyC,YAIzC,CASA,SAASC,EAAaC,GAAoD,IAAnD,SAAEC,EAAQ,KAAElB,EAAI,GAAEtB,EAAE,MAAEe,GAA2BwB,EAEtE,OACEzC,EAAAA,cAAA,WAASE,GAAIA,GACVe,GACCjB,EAAAA,cAACQ,EAAAA,GAAI,CAACC,GAAG,KAAKC,aAAa,KAAKC,KAAK,UAJzB,EAaTM,GAGJyB,EAGP,CAEA,SAASR,EAAeS,GAAkD,IAAjD,UAAER,GAA6CQ,EACtE,OACE3C,EAAAA,cAACwC,EAAa,CAAChB,KAAK,SAAStB,GAAG,YAAYe,MAAM,aAC/CkB,EAAUd,IAAIuB,IAAG,IAAAC,EAAA,OAChB7C,EAAAA,cAAA,OAAKsB,IAAK,GAAGsB,EAAIE,UAAUF,EAAIG,UAC7B/C,EAAAA,cAACQ,EAAAA,GAAI,CAACN,GAAG,SAASQ,aAAa,MAAMC,KAAK,YACvCiC,EAAIE,QAEP9C,EAAAA,cAACQ,EAAAA,GAAI,CACHN,GAAG,SACHE,UAAU,YACVS,MAAM,SACNH,aAAa,MACbJ,KAAK,KACLU,OAAO,OAEN4B,EAAIG,QAEG,QADHF,EACND,EAAII,aAAK,IAAAH,OAAA,EAATA,EAAWxB,IAAI4B,GACdjD,EAAAA,cAACQ,EAAAA,GAAI,CACHJ,UAAU,aACVS,MAAM,QACNH,aAAa,OACbC,KAAK,UACLW,IAAK2B,GAEJA,OAOf,CAEA,SAASjB,EAAgBkB,GAAqD,IAApD,WAAEjB,GAAgDiB,EAC1E,MAAM,EAACC,EAAQ,EAAEC,IAAeC,EAAAA,EAAAA,WAAS,GACzC,OACErD,EAAAA,cAACwC,EAAa,CAAChB,KAAK,eAAetB,GAAG,aAAae,MAAM,cACtDgB,EAAWZ,IAAIiC,GACdtD,EAAAA,cAAA,OAAKI,UAAU,WAAWkB,IAAK,GAAGgC,EAAIC,WAAWD,EAAIE,YACnDxD,EAAAA,cAAA,OAAK,iBAAYI,UAAU,kBAC3BJ,EAAAA,cAAA,OAAK,iBAAYI,UAAU,iBAC3BJ,EAAAA,cAAA,OAAKI,UAAU,UACbJ,EAAAA,cAACQ,EAAAA,GAAI,CACHN,GAAG,WACHE,UAAU,oBACVM,aAAa,OACbC,KAAK,UACLK,OAAO,OAENsC,EAAIE,SAAU,IACfxD,EAAAA,cAACQ,EAAAA,GAAI,CAACC,GAAG,OAAOL,UAAU,QAAQS,MAAM,SAASP,KAAK,MAAK,IACvD,IACDgD,EAAI7B,KACHzB,EAAAA,cAAC0B,EAAAA,GAAI,CAACC,KAAM2B,EAAI7B,KAAMG,UAAQ,EAACC,UAAQ,GACpCyB,EAAIC,SAGPD,EAAIC,UAIVvD,EAAAA,cAACQ,EAAAA,GAAI,CAACN,GAAG,OAAOW,MAAM,QAAQP,KAAK,KAAKK,KAAK,UAAUK,OAAO,OAC3DsC,EAAIG,MAEPzD,EAAAA,cAACQ,EAAAA,GAAI,CACHN,GAAG,UACHW,MAAM,SACNH,aAAc4C,EAAIN,MAAQ,UAAOU,EACjCC,UAAU,KACVhD,KAAK,QAEJ2C,EAAIpC,SAENoC,EAAIN,OACHhD,EAAAA,cAAA,MAAII,UAAU,QACXkD,EAAIN,MAAM3B,IAAIuC,GACb5D,EAAAA,cAAA,MAAII,UAAU,iBAAiBkB,IAAKsC,EAAK3C,OACvCjB,EAAAA,cAAA,OAAK,iBAAYI,UAAU,uBAC3BJ,EAAAA,cAACQ,EAAAA,GAAI,CAACqD,MAAI,EAAChD,MAAM,SAASF,KAAK,QAC5BiD,EAAK3C,OAERjB,EAAAA,cAACQ,EAAAA,GAAI,CAACK,MAAM,QAAQF,KAAK,WACtBiD,EAAKE,eAIXR,EAAIS,MACH/D,EAAAA,cAAA,OAAKI,UAAU,eACX+C,GACAnD,EAAAA,cAACQ,EAAAA,GAAI,CAACJ,UAAU,aAAaE,KAAK,MAChCN,EAAAA,cAAA,UAAQgE,QAASA,IAAMZ,GAAY,IAAO,cAK7CD,GACCnD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,MAAII,UAAU,gBACbkD,EAAIS,KAAK1C,IAAIuC,GACZ5D,EAAAA,cAAA,MAAII,UAAU,iBAAiBkB,IAAKsC,EAAK3C,OACvCjB,EAAAA,cAAA,OAAK,iBAAYI,UAAU,uBAC3BJ,EAAAA,cAACQ,EAAAA,GAAI,CAACqD,MAAI,EAAClD,KAAK,QACbiD,EAAK3C,OAERjB,EAAAA,cAACQ,EAAAA,GAAI,CAACK,MAAM,QAAQF,KAAK,WACtBiD,EAAKE,eAIZ9D,EAAAA,cAACQ,EAAAA,GAAI,CAACJ,UAAU,aAAaE,KAAK,MAChCN,EAAAA,cAAA,UAAQgE,QAASA,IAAMZ,GAAY,IAAQ,oBAerE,CAEA,SAAShB,EAAY6B,GAAyC,IAAxC,OAAE5B,GAAoC4B,EAC1D,OACEjE,EAAAA,cAACwC,EAAa,CAAChB,KAAK,aAAatB,GAAG,SAASe,MAAM,UAChDoB,EAAOhB,IAAI6C,GACVlE,EAAAA,cAAA,OAAKI,UAAU,QAAQkB,IAAK4C,EAAKjD,OAC/BjB,EAAAA,cAACQ,EAAAA,GAAI,CAACK,MAAM,SAASH,aAAa,KAAKC,KAAK,UAAUK,OAAO,OAC1DkD,EAAKjD,OAERjB,EAAAA,cAACmE,EAAAA,GAAK,CAACC,QAAQ,KAAKC,MAAI,GACrBH,EAAKI,MAAMjD,IAAIuC,GACd5D,EAAAA,cAACuE,EAAAA,GAAK,CAACjD,IAAKsC,EAAMY,MAAM,UAAUlE,KAAK,KAAKmE,QAAQ,QACjDb,OAQjB,CAEA,SAAStB,EAAcoC,GAA8C,IAA7C,SAAEnC,GAAyCmC,EACjE,MAAMnE,GAAKoE,EAAAA,EAAAA,IAAc,MAAM,GACzBC,GAAQC,EAAAA,EAAAA,IAAc,SAAS,GACrC,OACE7E,EAAAA,cAACwC,EAAa,CAAChB,KAAK,OAAOtB,GAAG,WAAWe,MAAM,YAC5CV,GAAMqE,EACL5E,EAAAA,cAAC+B,EAAAA,GAAG,KACF/B,EAAAA,cAACK,EAAAA,GAAG,CAACC,KAAK,KAAKC,GAAG,KAChBP,EAAAA,cAAA,UACGuC,EACEuC,OAAO,CAACC,EAAGC,IAAUA,EAAQ,GAAM,GACnC3D,IAAI4D,GACHjF,EAAAA,cAACkF,EAAa,CAAC5D,IAAK2D,EAAQrE,KAAMqE,QAASA,OAInDjF,EAAAA,cAACK,EAAAA,GAAG,CAACC,KAAK,KAAKC,GAAG,KAChBP,EAAAA,cAAA,UACGuC,EACEuC,OAAO,CAACC,EAAGC,IAAUA,EAAQ,GAAM,GACnC3D,IAAI4D,GACHjF,EAAAA,cAACkF,EAAa,CAAC5D,IAAK2D,EAAQrE,KAAMqE,QAASA,QAMrDjF,EAAAA,cAAC+B,EAAAA,GAAG,KACF/B,EAAAA,cAACK,EAAAA,GAAG,KACFL,EAAAA,cAAA,UACGuC,EAASlB,IAAI4D,GACZjF,EAAAA,cAACkF,EAAa,CAAC5D,IAAK2D,EAAQrE,KAAMqE,QAASA,QAQ3D,CAEA,SAASC,EAAaC,GAA0C,IAAzC,QAAEF,GAAqCE,EAC5D,OACEnF,EAAAA,cAAA,MACEI,UAAU,QACVF,GAAI+E,EAAQrE,KAAKwE,cAAcC,QAAQ,IAAK,KAC5C/D,IAAK2D,EAAQrE,MAEbZ,EAAAA,cAACmE,EAAAA,GAAK,CAACmB,MAAM,UACXtF,EAAAA,cAACQ,EAAAA,GAAI,CACHN,GAAG,OACHE,UAAU,aACVM,aAAa,OACbC,KAAK,UACLK,OAAO,OAEPhB,EAAAA,cAAC0B,EAAAA,GAAI,CAACC,KAAMsD,EAAQxD,KAAMG,UAAQ,GAC/BqD,EAAQrE,OAGZqE,EAAQM,MACPvF,EAAAA,cAACQ,EAAAA,GAAI,CACHN,GAAG,OACHE,UAAU,gBACVS,MAAM,QACNP,KAAK,KACLK,KAAK,UACLK,OAAO,OAENiE,EAAQM,KAAKlE,IAAI,CAACkE,EAAMP,IACvBhF,EAAAA,cAAA,QAAMsB,IAAKiE,GACRA,EACAP,EAAQC,EAAQM,KAAMC,OAAS,EAAI,KAAO,OAMrDxF,EAAAA,cAACQ,EAAAA,GAAI,CAACN,GAAG,cAAcW,MAAM,SAASF,KAAK,QACxCsE,EAAQnB,aAIjB,CAEO,MAAM2B,EAAeA,IAExBzF,EAAAA,cAAC0F,EAAAA,GAAQ,CACPC,KAAM,CACJC,IAAK,GAAGC,EAAAA,YACR5E,MAAO,yB","sources":["webpack://@adamgraham/portfolio/./src/pages/resume.tsx"],"sourcesContent":["import { Badge, Col, Icon, Link, Row, Stack, Text, useBreakpoint, useMediaQuery } from '@zigurous/forge-react'; // prettier-ignore\nimport { graphql, type HeadFC } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Metadata, Page } from '../components';\nimport { baseUri } from '../links';\nimport type { ResumeEducation, ResumeExperience, ResumeProject, ResumeQueryData, ResumeSkills } from '../types'; // prettier-ignore\nimport '../styles/resume.css';\n\ninterface ResumeProps {\n  data: ResumeQueryData;\n  location: Location;\n}\n\nexport default function Resume({ data, location }: ResumeProps) {\n  const resume = data.resume.nodes[0];\n  return (\n    <Page id=\"resume\" hideHeader location={location}>\n      <div className=\"container\">\n        <header className=\"row mb-lg\">\n          <Col className=\"mb-xl\" size=\"12\" lg=\"8\">\n            <Text as=\"h1\" id=\"name\" marginBottom=\"sm\" type=\"display\">\n              {resume.name}\n            </Text>\n            <Text\n              id=\"title\"\n              color=\"subtle\"\n              marginBottom=\"lg\"\n              style={{ fontSize: '1.5rem' }}\n              type=\"subtitle\"\n              weight=\"500\"\n            >\n              {resume.title}\n            </Text>\n            <Text\n              id=\"summary\"\n              className=\"text-balance\"\n              color=\"subtle\"\n              type=\"body\"\n            >\n              {resume.summary}\n            </Text>\n          </Col>\n          <Col\n            id=\"contact\"\n            className=\"flex flex-col justify-end mb-xl\"\n            style={{ gap: 'var(--spacing-sm)' }}\n            size=\"12\"\n            lg=\"4\"\n          >\n            {resume.contact.map(contact => (\n              <Text\n                id={contact.id}\n                key={contact.id}\n                className=\"inline-flex align-center\"\n                color=\"subtle\"\n                type=\"body-sm\"\n                weight=\"500\"\n              >\n                <Icon\n                  className=\"mr-sm\"\n                  icon={contact.icon}\n                  type={\n                    contact.id === 'github' || contact.id === 'linkedin'\n                      ? 'social'\n                      : 'material'\n                  }\n                />\n                {contact.link ? (\n                  <Link href={contact.link} external unstyled>\n                    {contact.text}\n                  </Link>\n                ) : (\n                  contact.text\n                )}\n              </Text>\n            ))}\n          </Col>\n        </header>\n        <Row>\n          <Col size=\"12\" lg=\"8\">\n            <ResumeExperience experience={resume.experience} />\n          </Col>\n          <Col size=\"12\" lg=\"4\">\n            <ResumeEducation education={resume.education} />\n            <ResumeSkills skills={resume.skills} />\n          </Col>\n        </Row>\n        <ResumeProjects projects={resume.projects} />\n      </div>\n    </Page>\n  );\n}\n\ninterface ResumeSectionProps {\n  children: React.ReactNode;\n  icon?: string;\n  id: string;\n  title?: string;\n}\n\nfunction ResumeSection({ children, icon, id, title }: ResumeSectionProps) {\n  const showIcons = false;\n  return (\n    <section id={id}>\n      {title && (\n        <Text as=\"h2\" marginBottom=\"xl\" type=\"title\">\n          {showIcons && icon && (\n            <Icon\n              className=\"mr-sm\"\n              icon={icon}\n              size=\"md\"\n              style={{ verticalAlign: 'baseline' }}\n            />\n          )}\n          {title}\n        </Text>\n      )}\n      {children}\n    </section>\n  );\n}\n\nfunction ResumeEducation({ education }: { education: ResumeEducation[] }) {\n  return (\n    <ResumeSection icon=\"school\" id=\"education\" title=\"Education\">\n      {education.map(edu => (\n        <div key={`${edu.school}-${edu.degree}`}>\n          <Text id=\"school\" marginBottom=\"xxs\" type=\"title-sm\">\n            {edu.school}\n          </Text>\n          <Text\n            id=\"degree\"\n            className=\"line-snug\"\n            color=\"subtle\"\n            marginBottom=\"xxs\"\n            size=\"md\"\n            weight=\"500\"\n          >\n            {edu.degree}\n          </Text>\n          {edu.notes?.map(note => (\n            <Text\n              className=\"line-tight\"\n              color=\"muted\"\n              marginBottom=\"xxxs\"\n              type=\"body-sm\"\n              key={note}\n            >\n              {note}\n            </Text>\n          ))}\n        </div>\n      ))}\n    </ResumeSection>\n  );\n}\n\nfunction ResumeExperience({ experience }: { experience: ResumeExperience[] }) {\n  const [showMore, setShowMore] = useState(false);\n  return (\n    <ResumeSection icon=\"work_history\" id=\"experience\" title=\"Experience\">\n      {experience.map(job => (\n        <div className=\"relative\" key={`${job.company}-${job.position}`}>\n          <div aria-hidden className=\"timeline-line\" />\n          <div aria-hidden className=\"timeline-dot\" />\n          <div className=\"ml-xxl\">\n            <Text\n              id=\"position\"\n              className=\"flex align-center\"\n              marginBottom=\"xxxs\"\n              type=\"body-lg\"\n              weight=\"600\"\n            >\n              {job.position}{' '}\n              <Text as=\"span\" className=\"ml-xs\" color=\"subtle\" size=\"lg\">\n                @{' '}\n                {job.link ? (\n                  <Link href={job.link} external unstyled>\n                    {job.company}\n                  </Link>\n                ) : (\n                  job.company\n                )}\n              </Text>\n            </Text>\n            <Text id=\"date\" color=\"muted\" size=\"xs\" type=\"caption\" weight=\"600\">\n              {job.date}\n            </Text>\n            <Text\n              id=\"summary\"\n              color=\"subtle\"\n              marginBottom={job.notes ? 'md' : undefined}\n              marginTop=\"xs\"\n              type=\"body\"\n            >\n              {job.summary}\n            </Text>\n            {job.notes && (\n              <ul className=\"body\">\n                {job.notes.map(item => (\n                  <li className=\"relative mb-sm\" key={item.title}>\n                    <div aria-hidden className=\"timeline-dot-small\" />\n                    <Text bold color=\"subtle\" type=\"body\">\n                      {item.title}\n                    </Text>\n                    <Text color=\"muted\" type=\"body-sm\">\n                      {item.description}\n                    </Text>\n                  </li>\n                ))}\n                {job.more && (\n                  <div className=\"print-none\">\n                    {!showMore && (\n                      <Text className=\"link mt-sm\" size=\"xs\">\n                        <button onClick={() => setShowMore(true)}>\n                          Show More\n                        </button>\n                      </Text>\n                    )}\n                    {showMore && (\n                      <>\n                        <hr className=\"thick my-md\" />\n                        {job.more.map(item => (\n                          <li className=\"relative mb-sm\" key={item.title}>\n                            <div aria-hidden className=\"timeline-dot-small\" />\n                            <Text bold type=\"body\">\n                              {item.title}\n                            </Text>\n                            <Text color=\"muted\" type=\"body-sm\">\n                              {item.description}\n                            </Text>\n                          </li>\n                        ))}\n                        <Text className=\"mt-sm link\" size=\"xs\">\n                          <button onClick={() => setShowMore(false)}>\n                            Show Less\n                          </button>\n                        </Text>\n                      </>\n                    )}\n                  </div>\n                )}\n              </ul>\n            )}\n          </div>\n        </div>\n      ))}\n    </ResumeSection>\n  );\n}\n\nfunction ResumeSkills({ skills }: { skills: ResumeSkills[] }) {\n  return (\n    <ResumeSection icon=\"psychology\" id=\"skills\" title=\"Skills\">\n      {skills.map(list => (\n        <div className=\"mb-xl\" key={list.title}>\n          <Text color=\"subtle\" marginBottom=\"sm\" type=\"body-lg\" weight=\"600\">\n            {list.title}\n          </Text>\n          <Stack spacing=\"xs\" wrap>\n            {list.items.map(item => (\n              <Badge key={item} shape=\"rounded\" size=\"sm\" variant=\"tint\">\n                {item}\n              </Badge>\n            ))}\n          </Stack>\n        </div>\n      ))}\n    </ResumeSection>\n  );\n}\n\nfunction ResumeProjects({ projects }: { projects: ResumeProject[] }) {\n  const lg = useBreakpoint('lg', false);\n  const print = useMediaQuery('print', false);\n  return (\n    <ResumeSection icon=\"apps\" id=\"projects\" title=\"Projects\">\n      {lg || print ? (\n        <Row>\n          <Col size=\"12\" lg=\"6\">\n            <ul>\n              {projects\n                .filter((_, index) => index % 2 === 0)\n                .map(project => (\n                  <ResumeProject key={project.name} project={project} />\n                ))}\n            </ul>\n          </Col>\n          <Col size=\"12\" lg=\"6\">\n            <ul>\n              {projects\n                .filter((_, index) => index % 2 === 1)\n                .map(project => (\n                  <ResumeProject key={project.name} project={project} />\n                ))}\n            </ul>\n          </Col>\n        </Row>\n      ) : (\n        <Row>\n          <Col>\n            <ul>\n              {projects.map(project => (\n                <ResumeProject key={project.name} project={project} />\n              ))}\n            </ul>\n          </Col>\n        </Row>\n      )}\n    </ResumeSection>\n  );\n}\n\nfunction ResumeProject({ project }: { project: ResumeProject }) {\n  return (\n    <li\n      className=\"mb-lg\"\n      id={project.name.toLowerCase().replace(' ', '-')}\n      key={project.name}\n    >\n      <Stack align=\"center\">\n        <Text\n          id=\"name\"\n          className=\"line-tight\"\n          marginBottom=\"xxxs\"\n          type=\"body-lg\"\n          weight=\"600\"\n        >\n          <Link href={project.link} external>\n            {project.name}\n          </Link>\n        </Text>\n        {project.tech && (\n          <Text\n            id=\"tech\"\n            className=\"mt-xxxs ml-sm\"\n            color=\"muted\"\n            size=\"xs\"\n            type=\"caption\"\n            weight=\"500\"\n          >\n            {project.tech.map((tech, index) => (\n              <span key={tech}>\n                {tech}\n                {index < project.tech!.length - 1 ? ', ' : ''}\n              </span>\n            ))}\n          </Text>\n        )}\n      </Stack>\n      <Text id=\"description\" color=\"subtle\" type=\"body\">\n        {project.description}\n      </Text>\n    </li>\n  );\n}\n\nexport const Head: HeadFC = () => {\n  return (\n    <Metadata\n      page={{\n        url: `${baseUri}/resume`,\n        title: 'Adam Graham • Resume',\n      }}\n    />\n  );\n};\n\nexport const query = graphql`\n  query ResumeQuery {\n    resume: allResumeJson {\n      nodes {\n        name\n        title\n        summary\n        contact {\n          id\n          icon\n          text\n          link\n        }\n        education {\n          school\n          degree\n          notes\n        }\n        experience {\n          date\n          company\n          position\n          summary\n          link\n          notes {\n            title\n            description\n          }\n          more {\n            title\n            description\n          }\n        }\n        skills {\n          title\n          items\n        }\n        projects {\n          name\n          description\n          link\n          tech\n        }\n      }\n    }\n  }\n`;\n"],"names":["Resume","_ref","data","location","resume","nodes","React","Page","id","hideHeader","className","Col","size","lg","Text","as","marginBottom","type","name","color","style","fontSize","weight","title","summary","gap","contact","map","key","Icon","icon","link","Link","href","external","unstyled","text","Row","ResumeExperience","experience","ResumeEducation","education","ResumeSkills","skills","ResumeProjects","projects","ResumeSection","_ref2","children","_ref3","edu","_edu$notes","school","degree","notes","note","_ref4","showMore","setShowMore","useState","job","company","position","date","undefined","marginTop","item","bold","description","more","onClick","_ref5","list","Stack","spacing","wrap","items","Badge","shape","variant","_ref6","useBreakpoint","print","useMediaQuery","filter","_","index","project","ResumeProject","_ref7","toLowerCase","replace","align","tech","length","Head","Metadata","page","url","baseUri"],"sourceRoot":""}