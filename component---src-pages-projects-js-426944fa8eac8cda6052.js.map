{"version":3,"file":"component---src-pages-projects-js-426944fa8eac8cda6052.js","mappings":"mNASO,MAkBDA,EAAU,CAAC,QAAS,MAAO,QAAS,QAAS,KAAM,MA8HzD,UA5HiBC,IAAyB,IAAxB,KAAEC,EAAI,SAAEC,GAAUF,EAClC,MAAMG,GAASC,EAAAA,EAAAA,UAAQ,KACrB,MAAMC,EAAY,IAAIC,gBAAgBJ,aAAQ,EAARA,EAAUK,QAChD,OAAOF,EAAUG,IAAI,UAAYH,EAAUI,IAAI,UAAY,IAAI,GAC9D,CAACP,IAEEQ,GAAqBN,EAAAA,EAAAA,UAAQ,IAC5BD,EACEF,EAAKU,KAAKC,WAAWC,KAAKC,IAC/B,MAAMC,EAAWD,EAASC,SAASF,KAAKG,IAAO,IAC1CA,EACHC,QAASD,EAAQE,KAAKC,SAAShB,OAEjC,MAAO,CACLiB,MAAON,EAASM,MAChBL,WACAM,MAAON,EAASO,OAAON,GAAYA,EAAQC,SAC5C,IAViBhB,EAAKU,KAAKC,YAY7B,CAACX,EAAME,IAEV,OACEoB,EAAAA,cAACC,EAAAA,GAAI,CACHC,GAAG,WACHvB,SAAUA,EACVwB,SAAU,CACRC,IAAKC,EAAAA,GACLR,MAAO,2BAGTG,EAAAA,cAAA,WAASM,UAAU,8BACjBN,EAAAA,cAAA,OAAKM,UAAU,yBACbN,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAAA,OAAKM,UAAU,0BACZ9B,EAAQc,KAAKiB,GACZP,EAAAA,cAAA,UACEQ,QAASA,KACH5B,IAAW2B,GACbE,EAAAA,EAAAA,UAAS,GAAG9B,EAAS+B,WAAW/B,EAASgC,OAAQ,CAC/CC,SAAS,KAGXH,EAAAA,EAAAA,UACE,GAAG9B,EAAS+B,WAAW/B,EAASgC,eAAeJ,IAC/C,CAAEK,SAAS,GAEf,EAEFC,IAAKN,GAELP,EAAAA,cAACc,EAAAA,GAAK,CACJR,UAAWS,IAAW,CAAE,kBAAmBnC,IAAW2B,IACtDS,MAAI,GAEHT,QAMVpB,EAAmBG,KAAKC,GACvBS,EAAAA,cAAA,WACEM,UAAWS,IAAW,0BAA2B,CAC/C,iCAAkCxB,EAASO,QAE7Ce,IAAKtB,EAASM,OAEdG,EAAAA,cAAA,MAAIM,UAAU,MAAMf,EAASM,OAC7BG,EAAAA,cAAA,UACGT,EAASC,SAASF,KAAKG,GACtBO,EAAAA,cAAA,MACEM,UAAWS,IAAW,sBAAuB,CAC3C,8BAA+BtB,EAAQC,SAEzCmB,IAAKpB,EAAQI,OAEbG,EAAAA,cAACiB,EAAAA,GAAI,CACHC,YAAazB,EAAQ0B,KAAOC,EAAAA,KAAa,IACzCC,SAAUC,QAAQ7B,EAAQ8B,eAAiB9B,EAAQ0B,MACnDN,IAAKpB,EAAQI,MACb2B,OAAO,SACPC,GAAIhC,EAAQ0B,MAAQ1B,EAAQ8B,aAC5BG,UAAQ,GAER1B,EAAAA,cAAA,OAAKM,UAAU,uBACbN,EAAAA,cAAA,QAAMM,UAAU,wBACbb,EAAQI,OAEXG,EAAAA,cAAA,QAAMM,UAAU,8BACbb,EAAQkC,cAGb3B,EAAAA,cAAA,MAAIM,UAAU,wBACdN,EAAAA,cAAA,OAAKM,UAAU,uBAAuBb,EAAQmC,eAQvD,C","sources":["webpack://@adamgraham/portfolio/./src/pages/projects.js"],"sourcesContent":["import { Badge, Link } from '@zigurous/react-components';\r\nimport classNames from 'classnames';\r\nimport { graphql, Link as GatsbyLink, navigate } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useMemo } from 'react';\r\nimport { Page } from '../components';\r\nimport { baseUri } from '../links';\r\nimport '../styles/projects-list.css';\r\n\r\nexport const query = graphql`\r\n  query Projects {\r\n    json: allProjectsJson {\r\n      categories: nodes {\r\n        title\r\n        projects {\r\n          title\r\n          description\r\n          date\r\n          link\r\n          externalLink\r\n          tags\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst filters = ['React', 'iOS', 'Unity', 'VR/AR', '3D', '2D'];\r\n\r\nconst Projects = ({ data, location }) => {\r\n  const filter = useMemo(() => {\r\n    const urlParams = new URLSearchParams(location?.search);\r\n    return urlParams.has('filter') ? urlParams.get('filter') : null;\r\n  }, [location]);\r\n\r\n  const filteredCategories = useMemo(() => {\r\n    if (!filter) return data.json.categories;\r\n    return data.json.categories.map((category) => {\r\n      const projects = category.projects.map((project) => ({\r\n        ...project,\r\n        hidden: !project.tags.includes(filter),\r\n      }));\r\n      return {\r\n        title: category.title,\r\n        projects,\r\n        empty: projects.every((project) => project.hidden),\r\n      };\r\n    });\r\n  }, [data, filter]);\r\n\r\n  return (\r\n    <Page\r\n      id=\"projects\"\r\n      location={location}\r\n      metadata={{\r\n        url: baseUri,\r\n        title: 'Adam Graham â€¢ Projects',\r\n      }}\r\n    >\r\n      <article className=\"projects-list container-lg\">\r\n        <div className=\"projects-list__header\">\r\n          <h1>Projects</h1>\r\n          <div className=\"projects-list__filters\">\r\n            {filters.map((tag) => (\r\n              <button\r\n                onClick={() => {\r\n                  if (filter === tag) {\r\n                    navigate(`${location.pathname}${location.hash}`, {\r\n                      replace: true,\r\n                    });\r\n                  } else {\r\n                    navigate(\r\n                      `${location.pathname}${location.hash}?filter=${tag}`,\r\n                      { replace: true }\r\n                    );\r\n                  }\r\n                }}\r\n                key={tag}\r\n              >\r\n                <Badge\r\n                  className={classNames({ 'badge--selected': filter === tag })}\r\n                  pill\r\n                >\r\n                  {tag}\r\n                </Badge>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        {filteredCategories.map((category) => (\r\n          <section\r\n            className={classNames('projects-list__category', {\r\n              'projects-list__category--empty': category.empty,\r\n            })}\r\n            key={category.title}\r\n          >\r\n            <h2 className=\"h6\">{category.title}</h2>\r\n            <ul>\r\n              {category.projects.map((project) => (\r\n                <li\r\n                  className={classNames('projects-list__item', {\r\n                    'projects-list__item--hidden': project.hidden,\r\n                  })}\r\n                  key={project.title}\r\n                >\r\n                  <Link\r\n                    ElementType={project.link ? GatsbyLink : 'a'}\r\n                    external={Boolean(project.externalLink && !project.link)}\r\n                    key={project.title}\r\n                    target=\"_blank\"\r\n                    to={project.link || project.externalLink}\r\n                    unstyled\r\n                  >\r\n                    <div className=\"projects-list__text\">\r\n                      <span className=\"projects-list__title\">\r\n                        {project.title}\r\n                      </span>\r\n                      <span className=\"projects-list__description\">\r\n                        {project.description}\r\n                      </span>\r\n                    </div>\r\n                    <hr className=\"projects-list__line\" />\r\n                    <div className=\"projects-list__date\">{project.date}</div>\r\n                  </Link>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        ))}\r\n      </article>\r\n    </Page>\r\n  );\r\n};\r\n\r\nProjects.propTypes = {\r\n  data: PropTypes.shape({\r\n    json: PropTypes.shape({\r\n      title: PropTypes.string,\r\n      Projects: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          title: PropTypes.string,\r\n          description: PropTypes.string,\r\n          date: PropTypes.string,\r\n          link: PropTypes.string,\r\n          externalLink: PropTypes.string,\r\n          tags: PropTypes.arrayOf(PropTypes.string),\r\n        })\r\n      ),\r\n    }),\r\n  }),\r\n  location: PropTypes.object,\r\n};\r\n\r\nexport default Projects;\r\n"],"names":["filters","_ref","data","location","filter","useMemo","urlParams","URLSearchParams","search","has","get","filteredCategories","json","categories","map","category","projects","project","hidden","tags","includes","title","empty","every","React","Page","id","metadata","url","baseUri","className","tag","onClick","navigate","pathname","hash","replace","key","Badge","classNames","pill","Link","ElementType","link","GatsbyLink","external","Boolean","externalLink","target","to","unstyled","description","date"],"sourceRoot":""}